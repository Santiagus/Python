openapi: 3.0.3

info:
  title: Car Pooling Service Challenge
  description: API that allows you to manage request for car pooling
  version: 1.0.0

servers:
  - url: http://127.0.0.1:8000
    description: local development server  

paths:
  /status:
    get:      
      summary: Service status
      operationId: getStatus
      description: >
        Indicates the service has started up correctly and is ready to accept request.        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref:  '#/components/schemas/getServiceStatus'
  
  /cars:
    post:
      summary: Load list of available cars
      operationId: loadCars
      description: >
        Load the list of available cars in the service and remove all previous data
        (reset the application state). This method may be called more than once during
        the life cycle of the service.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loadCarsSchema'
      responses:
        '200':
          description: A JSON representation of the created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loadCarsSummarySchema'
        '400':
          $ref: '#/components/responses/BadRequest'

  /journey:
    post:
      summary: Request to perform a journey
      operationId: journey
      description: >
        A group of people requests to perform a journey.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/journeySchema'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/journeySchema'
        '400':
          $ref: '#/components/responses/BadRequest'
        
  /dropoff:
    post:
      summary: Request to be dropped off
      operationId: dropoff
      description: >
        A group of people requests to be dropped off. Whether they traveled or not.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/dropoffSchema'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dropoffSchema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /locate:
    post:
      summary: Request the car info the group is traveling
      operationId: locate
      description: >
        Given a group ID such that `ID=X`, return the car the group is traveling
        with, or no car if they are still waiting to be served.
      requestBody:
        required: true        
        content:
          application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/groupIDSchema'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/carSchema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: The payload contains invalid values.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        detail:
          oneOf:
            - type: string
            - type: array
      required:
        - detail

    getServiceStatus:
      type: string      

    carSchema:
      type: object
      required:
        - id
        - seats
      properties:
        id:
          type: integer
          format: int64
        seats:
          type: integer
          format: int64
          default: 4
          minimum: 4
          maximum: 6
    
    journeySchema:
      type: object
      required:
        - id
        - people
      properties:
        id:
          type: integer
          format: int64
        people:
          type: integer
          format: int64
          default: 1
          minimum: 1
          maximum: 6

    groupIDSchema:
      type: integer
      format: int64
    
    dropoffSchema:
      type: integer
      format: int64

    loadCarsSchema:
      additionalProperties: false
      type: object
      required:
        - cars
      properties:
        cars:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/carSchema'

    loadCarsSummarySchema:
      type: string